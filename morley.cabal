cabal-version:       2.4
name:                morley
version:             0.2.0.1
synopsis:            Developer tools for the Michelson Language
description:
  A library to make writing smart contracts in Michelson — the smart contract
  language of the Tezos blockchain — pleasant and effective.
homepage:            https://gitlab.com/morley-framework/morley
license:             AGPL-3.0-or-later
license-file:        LICENSE
author:              camlCase, Serokell, Tocqueville Group
maintainer:          john.c.burnham@gmail.com
copyright:           2018 camlCase, 2019 Tocqueville Group
category:            Language
build-type:          Simple
bug-reports:         https://issues.serokell.io/issues/TM
extra-doc-files:     CHANGES.md
                   , CONTRIBUTING.md
                   , README.md

source-repository head
  type:     git
  location: git@gitlab.com:morley-framework/morley.git

library
  hs-source-dirs:      src
  default-language:    Haskell2010
  exposed-modules:
                       Michelson.Typed.Value
  other-modules:       Michelson.Typed.CValue
                     , Michelson.Typed.T
                     , Michelson.Untyped.Type

  build-depends:       base >= 4.7 && < 5
                     , bytestring
                     , text
                     , universum
  ghc-options:        -Weverything
                      -Wno-missing-exported-signatures
                      -Wno-missing-import-lists
                      -Wno-missed-specialisations
                      -Wno-all-missed-specialisations
                      -Wno-unsafe
                      -Wno-safe
                      -Wno-missing-local-signatures
                      -Wno-monomorphism-restriction
                      -Wno-implicit-prelude
  default-extensions:
                       ApplicativeDo
                       AllowAmbiguousTypes
                       BangPatterns
                       ConstraintKinds
                       DataKinds
                       DefaultSignatures
                       DeriveFoldable
                       DeriveFunctor
                       DeriveGeneric
                       DeriveTraversable
                       EmptyCase
                       FlexibleContexts
                       FlexibleInstances
                       GADTs
                       GeneralizedNewtypeDeriving
                       LambdaCase
                       MonadFailDesugaring
                       MultiParamTypeClasses
                       MultiWayIf
                       NegativeLiterals
                       NoImplicitPrelude
                       OverloadedLabels
                       OverloadedStrings
                       PatternSynonyms
                       PolyKinds
                       RankNTypes
                       RecordWildCards
                       RecursiveDo
                       ScopedTypeVariables
                       StandaloneDeriving
                       TemplateHaskell
                       TupleSections
                       TypeApplications
                       TypeFamilies
                       TypeOperators
                       UndecidableInstances
                       ViewPatterns

test-suite morley-test
  hs-source-dirs:      test
  main-is:             Main.hs
  default-language:    Haskell2010
  type:                exitcode-stdio-1.0
  other-modules:       Test.Tasty.HUnit
  build-depends:
                       base >= 4.7 && < 5
                     , hspec-expectations
                     , HUnit
                     , morley
                     , tasty
  ghc-options:        -Weverything
                      -Wno-missing-exported-signatures
                      -Wno-missing-import-lists
                      -Wno-missed-specialisations
                      -Wno-all-missed-specialisations
                      -Wno-unsafe
                      -Wno-safe
                      -Wno-missing-local-signatures
                      -Wno-monomorphism-restriction
                      -Wno-implicit-prelude
  default-extensions:
                       ApplicativeDo
                       AllowAmbiguousTypes
                       BangPatterns
                       ConstraintKinds
                       DataKinds
                       DeriveFoldable
                       DeriveFunctor
                       DeriveGeneric
                       DeriveTraversable
                       EmptyCase
                       FlexibleContexts
                       FlexibleInstances
                       GADTs
                       GeneralizedNewtypeDeriving
                       LambdaCase
                       MonadFailDesugaring
                       MultiParamTypeClasses
                       MultiWayIf
                       NegativeLiterals
                       OverloadedLabels
                       OverloadedStrings
                       PatternSynonyms
                       PolyKinds
                       RankNTypes
                       RecordWildCards
                       RecursiveDo
                       ScopedTypeVariables
                       StandaloneDeriving
                       TemplateHaskell
                       TupleSections
                       TypeApplications
                       TypeFamilies
                       TypeOperators
                       UndecidableInstances
                       ViewPatterns
